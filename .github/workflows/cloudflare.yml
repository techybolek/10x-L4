name: Deploy to Cloudflare Pages

on:
  push:
    branches: [docker]
  pull_request:
    branches: [docker]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    environment: test
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      SITE_URL: 'http://localhost:3000'
      MODEL: ${{ vars.MODEL }}
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4
      - name: Debug Environment Variables
        run: |
          echo "=== Environment Variable Status ==="
          echo "SUPABASE_URL is set: $([[ -n "$SUPABASE_URL" ]] && echo 'yes' || echo 'no')"
          echo "SUPABASE_ANON_KEY is set: $([[ -n "$SUPABASE_ANON_KEY" ]] && echo 'yes' || echo 'no')"
          echo "OPENROUTER_API_KEY is set: $([[ -n "$OPENROUTER_API_KEY" ]] && echo 'yes' || echo 'no')"
          echo "TEST_USER_EMAIL is set: $([[ -n "$TEST_USER_EMAIL" ]] && echo 'yes' || echo 'no')"
          echo "TEST_USER_PASSWORD is set: $([[ -n "$TEST_USER_PASSWORD" ]] && echo 'yes' || echo 'no')"
          echo "NODE_ENV is: $NODE_ENV"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Build application
        run: npm run build
      - name: Start application
        run: |
          echo "Starting application with environment variables..."
          env | sort
          DEBUG=* ASTRO_LOG_LEVEL=debug npm run preview 2>&1 | tee server-output.log &
          echo $! > server.pid
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app to be ready..."
          timeout=60
          while ! curl -v http://localhost:3000 2>&1; do
            if [ $timeout -le 0 ]; then
              echo "=== Server failed to start ==="
              echo "=== Last 50 lines of server output ==="
              tail -n 50 server-output.log
              echo "=== Process Status ==="
              ps aux | grep node
              echo "=== Port Status ==="
              netstat -tulpn | grep 3000 || true
              exit 1
            fi
            echo "Waiting... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout - 2))
          done
          echo "=== Testing test-page endpoint ==="
          curl -v http://localhost:3000/test-page 2>&1 | tee test-page-response.log
          echo "=== Recent server output ==="
          tail -n 50 server-output.log
      - name: Run API tests
        run: npm run test:api
        env:
          DEBUG: pw:api*
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DEBUG: pw:api*
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            debug-*.png
            test-results/
            playwright-report/
            server-output.log
            test-page-response.log
            npm-debug.log*

  deploy:
    needs: [unit-test, e2e-test, lint]
    runs-on: ubuntu-latest
    # Specify which environment to use
    environment: production  # or 'test' depending on your needs
    permissions:
      contents: read
      deployments: write
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      SITE_URL: 'https://10x-l4.pages.dev'
      NODE_VERSION: "20"

    steps:
      - uses: actions/checkout@v4

      - name: Debug Environment and Credentials
        run: |
          echo "Current GitHub Environment: ${{ github.event.deployment.environment || 'production' }}"
          echo "Checking Cloudflare credentials..."
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "✓ CLOUDFLARE_API_TOKEN is set"
            echo "Token length: ${#CLOUDFLARE_API_TOKEN}"
          else
            echo "✗ CLOUDFLARE_API_TOKEN is not set"
            echo "Make sure the secret is set in the GitHub Environment: ${{ github.event.deployment.environment || 'production' }}"
            exit 1
          fi
          if [ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "✓ CLOUDFLARE_ACCOUNT_ID is set"
            echo "Account ID length: ${#CLOUDFLARE_ACCOUNT_ID}"
          else
            echo "✗ CLOUDFLARE_ACCOUNT_ID is not set"
            echo "Make sure the secret is set in the GitHub Environment: ${{ github.event.deployment.environment || 'production' }}"
            exit 1
          fi
          echo "Checking Supabase credentials..."
          if [ -n "${{ secrets.SUPABASE_URL }}" ]; then
            echo "✓ SUPABASE_URL is set"
          else
            echo "✗ SUPABASE_URL is not set"
            echo "Make sure the secret is set in the GitHub Environment: ${{ github.event.deployment.environment || 'production' }}"
            exit 1
          fi
          if [ -n "${{ secrets.SUPABASE_KEY }}" ]; then
            echo "✓ SUPABASE_KEY is set"
          else
            echo "✗ SUPABASE_KEY is not set"
            echo "Make sure the secret is set in the GitHub Environment: ${{ github.event.deployment.environment || 'production' }}"
            exit 1
          fi
          echo "Project name: 10x-l4"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build:cloudflare
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Debug Pre-Deploy
        run: |
          echo "Checking deployment configuration..."
          echo "Directory contents:"
          ls -la dist
          echo "Verifying Cloudflare configuration..."
          echo "Using project name: 10x-l4"
          echo "Using directory: dist"
          echo "Using environment: ${{ github.event.deployment.environment || 'production' }}"

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: 10x-l4
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref || github.ref_name }}
          wranglerVersion: '3' 