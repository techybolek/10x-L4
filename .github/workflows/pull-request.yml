name: Pull Request Checks

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
    types: [opened, synchronize, reopened]

env:
  # Global environment variables available to all jobs
  NODE_ENV: test
  TEST_API_URL: http://localhost:3000
  # Add placeholders for test user credentials - these should be set in GitHub Secrets
  TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
  TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: |
          # Start the app and tee output to both terminal and file
          DEBUG=* ASTRO_LOG_LEVEL=debug npm run dev 2>&1 | tee server-output.log &
          echo $! > server.pid
          
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app to be ready..."
          timeout=60
          while ! curl -v http://localhost:3000 2>&1; do
            if [ $timeout -le 0 ]; then
              echo "=== Server failed to start ==="
              echo "=== Last 50 lines of server output ==="
              tail -n 50 server-output.log
              echo "=== Process Status ==="
              ps aux | grep node
              echo "=== Port Status ==="
              netstat -tulpn | grep 3000 || true
              exit 1
            fi
            echo "Waiting... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout - 2))
          done
          
          echo "=== Testing test-page endpoint ==="
          curl -v http://localhost:3000/test-page 2>&1 | tee test-page-response.log
          
          echo "=== Recent server output ==="
          tail -n 50 server-output.log
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DEBUG: pw:api*
        
      - name: Capture diagnostics on failure
        if: failure()
        run: |
          echo "=== Server Output at Failure ==="
          cat server-output.log
          echo "=== Process Status ==="
          ps aux | grep node
          echo "=== Test Page Response ==="
          cat test-page-response.log
        
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            debug-*.png
            test-results/
            playwright-report/
            server-output.log
            test-page-response.log
            npm-debug.log*

  e2e-test:
    needs: lint
    name: E2E Tests
    runs-on: ubuntu-latest
    
    env:
      # Environment variables specific to E2E tests
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      NODE_ENV: test
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Required Secrets
        run: |
          missing_secrets=()
          
          if [ -z "$SUPABASE_URL" ]; then
            missing_secrets+=("SUPABASE_URL")
          fi
          if [ -z "$SUPABASE_ANON_KEY" ]; then
            missing_secrets+=("SUPABASE_ANON_KEY")
          fi
          if [ -z "$OPENROUTER_API_KEY" ]; then
            missing_secrets+=("OPENROUTER_API_KEY")
          fi
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following required secrets are missing:"
            printf '%s\n' "${missing_secrets[@]}"
            echo "Please add these secrets in your GitHub repository:"
            echo "1. Go to your repository settings"
            echo "2. Navigate to Secrets and Variables > Actions"
            echo "3. Add the missing secrets"
            exit 1
          fi
          
          echo "All required secrets are present"
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: |
          # Start the app and tee output to both terminal and file
          DEBUG=* ASTRO_LOG_LEVEL=debug npm run dev 2>&1 | tee server-output.log &
          echo $! > server.pid
          
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app to be ready..."
          timeout=60
          while ! curl -v http://localhost:3000 2>&1; do
            if [ $timeout -le 0 ]; then
              echo "=== Server failed to start ==="
              echo "=== Last 50 lines of server output ==="
              tail -n 50 server-output.log
              echo "=== Process Status ==="
              ps aux | grep node
              echo "=== Port Status ==="
              netstat -tulpn | grep 3000 || true
              exit 1
            fi
            echo "Waiting... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout - 2))
          done
          
          echo "=== Testing test-page endpoint ==="
          curl -v http://localhost:3000/test-page 2>&1 | tee test-page-response.log
          
          echo "=== Recent server output ==="
          tail -n 50 server-output.log
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DEBUG: pw:api*
        
      - name: Capture diagnostics on failure
        if: failure()
        run: |
          echo "=== Server Output at Failure ==="
          cat server-output.log
          echo "=== Process Status ==="
          ps aux | grep node
          echo "=== Test Page Response ==="
          cat test-page-response.log
        
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            debug-*.png
            test-results/
            playwright-report/
            server-output.log
            test-page-response.log
            npm-debug.log*

  status-comment:
    needs: [e2e-test]
    name: PR Status Comment
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        
      - name: Create status comment
        uses: actions/github-script@v7
        with:
          script: |
            
            const statusComment = `## Pull Request Check Results ðŸŽ¯
            
            ### Test Coverage Summary
            - E2E Tests: Completed âœ…
            
            ### Detailed Results
            - E2E Tests: âœ… Passed
            
            [View detailed Playwright report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: statusComment
            }); 